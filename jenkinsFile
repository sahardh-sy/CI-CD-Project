pipeline {
    agent any
    tools {
        maven '3.8.6'
    }    
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.1.113:8081"
        NEXUS_REPOSITORY = "maven-nexus-repo"
        NEXUS_CREDENTIAL_ID = "nexus3"
        imageName = "gestionAchats"
        registry = 'http://192.168.1.113:8081/'
        dockerImage = ''
    }

    stages {
        stage("Cloning Project"){
            steps {
                git branch: 'master',
                url:'https://github.com/sahardh-sy/CI-CD-Project.git/';
                echo 'checkout stage'
            }
        }
       
        stage ('MVN clean') {
      steps {
        sh 'mvn clean'
        echo 'Build stage done'
      }
    }
 
   stage("compile Project"){
            steps {
                 sh 'mvn compile'
                  echo 'compile stage done'
            }        
   }


        stage('JUnit Test') {
            steps {
                  sh 'mvn test'
            }
        }       
        stage('SonarQube Scan Code Quality') {
            steps {
                withSonarQubeEnv('SonarQube') {
                  sh 'mvn sonar:sonar'
                }
            }
        }
     stage('Packaging') {
            steps {
                  sh 'mvn clean package -DskipTests=true'
            }
        }
        
        
        
          stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        } 

 post {
        always {
            emailext body: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS : Check console output at $BUILD_URL to view the results. ', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!'
        }
    } 
    
     
     
    }
